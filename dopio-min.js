class dopioClass{constructor(selector){this.container=new Set();if(typeof selector==="string"){const elements=document.querySelectorAll(selector);for(const el of elements){this.container.add(el)}}else if(selector instanceof HTMLElement){this.container.add(selector)}}html(htmlContent){for(const el of this.container){el.innerHTML=htmlContent}return this}css(propertyName,value){if(value===undefined){const el=Array.from(this.container)[0];return el.style[propertyName]}else{for(const el of this.container){el.style[propertyName]=value}}return this}setText(textContent){if(textContent==undefined){const el=Array.from(this.container)[0];return el.textContent}for(const el of this.container){el.textContent=textContent}return this}on(name,handler){for(const el of this.container){el.addEventListener(name,(e)=>handler(e))}return this}attribute(name,value){if(value===undefined){const el=Array.from(this.container)[0];return el.getAttribute(name)}else{for(const el of this.container){el.setAttribute(name,value)}}return this}click(handler){if(handler==undefined){for(const el of this.container){el.click()}}else{for(const el of this.container){el.addEventListener("click",handler)}}return this}addClass(className){for(const el of this.container){el.classList.add(className)}return this}each(callback){const container=Array.from(this.container);for(let i=0;i<container.length;i++){const resultat=callback.call(container[i],i,container[i]);if(resultat===false){break}}return this}is(selector){const elements=Array.from(document.querySelectorAll(selector));const container=Array.from(this.container);for(const el of container){if(!elements.includes(el)){return false}return true}}}const dopio=(selector)=>new dopioClass(selector);
